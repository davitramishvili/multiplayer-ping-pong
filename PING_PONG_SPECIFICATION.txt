# MULTIPLAYER PING PONG GAME - DEVELOPER SPECIFICATION
# ====================================================

## PROJECT OVERVIEW
Build a real-time multiplayer Ping Pong game with React frontend and Node.js backend using native WebSockets for synchronization. This is an educational assignment requiring 10-15 structured commits demonstrating full-stack development skills.

## TECHNICAL ARCHITECTURE

### Technology Stack
- Frontend: React (JavaScript)
- Backend: Node.js with Express
- Real-time Communication: Native WebSockets (not Socket.IO)
- Project Structure: Monorepo with separate folders
- Ports: Frontend (3000), Backend (3001)
- Package Management: npm with unified scripts

### Project Structure 

ping-pong-game/
├── package.json (root - manages both frontend/backend)
├── README.md
├── frontend/
│ ├── package.json
│ ├── public/
│ ├── src/
│ │ ├── components/
│ │ │ ├── Lobby.js
│ │ │ ├── GameArea.js
│ │ │ ├── Paddle.js
│ │ │ └── Ball.js
│ │ ├── hooks/
│ │ │ └── useWebSocket.js
│ │ ├── utils/
│ │ │ └── gameConstants.js
│ │ └── App.js
└── backend/
├── package.json
├── server.js
├── gameLogic/
│ ├── GameRoom.js
│ ├── Ball.js
│ └── Paddle.js
└── utils/
└── constants.js
```

## GAME MECHANICS SPECIFICATION

### Core Game Rules
- Scoring: First to 5 points, must win by 2 points minimum
- Traditional ping pong rules: ball must be intercepted by paddle
- Game ends when win condition met, players return to lobby

### Ball Physics
- Initial Speed: Moderate constant (define as INITIAL_BALL_SPEED = 200 pixels/second)
- Speed Increase: 5% per successful paddle hit (max 400 pixels/second)
- Bounce Behavior:
  - Paddle bounces: Predictable 45-degree angle reflection
  - Wall bounces: Perfect reflection (angle in = angle out)
- Reset: Center position with random direction after each point

### Paddle Mechanics
- Size: 15% of game area height, 2% of game area width
- Position: Slightly inset from edges (5% from left/right borders)
- Movement: Continuous motion while key held down
- Speed: Constant 300 pixels/second
- Boundaries: Cannot move beyond top/bottom walls

### Game Area
- Aspect Ratio: 16:9
- Display: Full browser window
- Responsive: Scale proportionally maintaining aspect ratio
- Visual Elements: Center line, score display, player/spectator counters

## USER INTERFACE SPECIFICATION

### Visual Design
- Background: Black (#000000)
- Paddles/Ball: White (#FFFFFF)
- Center Line: White dashed line
- Paddle Highlight: White glow effect (box-shadow: 0 0 10px #FFFFFF)
- Fonts: Monospace for scores, sans-serif for UI text

### Control Scheme
- Player 1: W (up) / S (down)
- Player 2: Up Arrow (up) / Down Arrow (down)
- Visual Feedback: Paddle glow while key pressed
- No pause functionality

### Screen States
1. **Lobby Screen**:
   - Title: "Multiplayer Ping Pong"
   - Role selection buttons: "Player 1", "Player 2", "Spectator"
   - Current status display: "Player 1: [Name/Empty]", "Player 2: [Name/Empty]"
   - Spectator count: "Spectators: X"
   - Auto-transition to game when 2 players ready

2. **Game Screen**:
   - Game area with paddles, ball, center line
   - Score display: "Player 1: X - Player 2: Y"
   - Player/spectator counters
   - For spectators: "Play" button appears when player disconnects

3. **Game Over Screen**:
   - Winner announcement: "Player X Wins!"
   - Auto-return to lobby after 3 seconds

## REAL-TIME COMMUNICATION PROTOCOL

### WebSocket Events (Client → Server)
```javascript
{
  type: "JOIN_LOBBY",
  payload: { playerName: string, role: "player1"|"player2"|"spectator" }
}

{
  type: "PADDLE_MOVE",
  payload: { direction: "up"|"down"|"stop", playerId: string }
}

{
  type: "TAKE_PLAYER_SLOT",
  payload: { playerId: string, slot: "player1"|"player2" }
}
```

### WebSocket Events (Server → Client)
```javascript
{
  type: "LOBBY_UPDATE",
  payload: {
    player1: { id: string, name: string } | null,
    player2: { id: string, name: string } | null,
    spectators: number,
    gameInProgress: boolean
  }
}

{
  type: "GAME_STATE",
  payload: {
    ball: { x: number, y: number, velocityX: number, velocityY: number },
    paddle1: { y: number, moving: boolean },
    paddle2: { y: number, moving: boolean },
    score: { player1: number, player2: number },
    gameStatus: "playing"|"paused"|"ended"
  }
}

{
  type: "GAME_OVER",
  payload: { winner: "player1"|"player2", finalScore: { player1: number, player2: number } }
}

{
  type: "PLAYER_DISCONNECTED",
  payload: { slot: "player1"|"player2" }
}
```

## DATA HANDLING & STATE MANAGEMENT

### Server State
```javascript
class GameRoom {
  constructor() {
    this.players = { player1: null, player2: null };
    this.spectators = new Set();
    this.gameState = {
      ball: { x: 400, y: 300, velocityX: 200, velocityY: 200, speed: 200 },
      paddles: {
        player1: { y: 250, moving: false, direction: null },
        player2: { y: 250, moving: false, direction: null }
      },
      score: { player1: 0, player2: 0 },
      status: "waiting" // waiting|playing|paused|ended
    };
    this.gameLoop = null;
  }
}
```

### Client State (React)
```javascript
const [gameState, setGameState] = useState({
  currentScreen: "lobby", // lobby|game|gameOver
  lobbyData: { player1: null, player2: null, spectators: 0 },
  gameData: { ball: {}, paddles: {}, score: {}, status: "waiting" },
  userRole: null, // player1|player2|spectator
  userId: null
});
```

## ERROR HANDLING & EDGE CASES

### Connection Management
1. **Single Player Disconnect**:
   - Server pauses game (status = "paused")
   - Broadcast PLAYER_DISCONNECTED event
   - Show "Play" button for spectators
   - Allow original player to reconnect and resume

2. **Both Players Disconnect**:
   - End current game
   - Reset game state
   - Return all users to lobby
   - Allow spectators to become players

3. **WebSocket Connection Issues**:
   - Client: Implement auto-reconnection with exponential backoff
   - Server: Clean up disconnected clients after 30 seconds
   - Graceful degradation: Show connection status to users

4. **Invalid Game States**:
   - Validate all client inputs on server
   - Prevent paddle movement outside boundaries
   - Rate limit paddle movement commands (max 60 per second)

### Input Validation
- Sanitize all incoming WebSocket messages
- Validate paddle positions before applying
- Ignore commands from spectators for game actions
- Prevent duplicate role assignments

## TESTING STRATEGY

### Unit Tests
1. **Backend Game Logic**:
   - Ball collision detection with paddles
   - Ball collision detection with walls
   - Score calculation and win conditions
   - Paddle movement boundaries

2. **Frontend Components**:
   - Lobby role selection
   - Game area rendering
   - Keyboard input handling
   - WebSocket message handling

### Integration Tests
1. **WebSocket Communication**:
   - Client-server message exchange
   - Multiple client synchronization
   - Connection/disconnection handling

2. **Game Flow**:
   - Complete game from lobby to finish
   - Player role switching
   - Spectator functionality

### Manual Testing Scenarios
1. Two players complete full game
2. Spectator joins ongoing game
3. Player disconnects mid-game, spectator takes over
4. Both players disconnect, spectators start new game
5. Rapid paddle movement and ball physics
6. Win condition edge cases (win by 2 rule)

## DEVELOPMENT PHASES (10-15 COMMITS)

### Phase 1: Project Foundation (Commits 1-3)
1. **Initial Setup**: Create folder structure, package.json files, basic README
2. **Backend Foundation**: Express server, WebSocket setup, basic routing
3. **Frontend Foundation**: React app initialization, basic component structure

### Phase 2: Core UI (Commits 4-6)
4. **Lobby Implementation**: Role selection, player status display
5. **Game Area Rendering**: Canvas/div-based game area, static paddles and ball
6. **Basic Styling**: Black background, white elements, responsive design

### Phase 3: Local Functionality (Commits 7-9)
7. **Keyboard Controls**: Local paddle movement, key event handling
8. **Ball Physics**: Local ball movement, wall bouncing, basic collision
9. **Game Logic**: Scoring system, win conditions, game state management

### Phase 4: Real-time Features (Commits 10-12)
10. **WebSocket Integration**: Client-server communication for paddle movements
11. **Game Synchronization**: Real-time ball position, score updates
12. **Multi-client Support**: Multiple players, spectator functionality

### Phase 5: Advanced Features (Commits 13-15)
13. **Connection Handling**: Disconnect/reconnect, spectator takeover
14. **Polish & UX**: Paddle highlighting, smooth animations, error messages
15. **Final Documentation**: Complete README, code comments, deployment guide

## PERFORMANCE REQUIREMENTS

### Server Performance
- Support minimum 10 concurrent spectators per game
- Game loop: 60 FPS (16.67ms intervals)
- WebSocket message rate: Handle up to 120 messages/second per client

### Client Performance
- Smooth 60 FPS rendering
- Input lag: <50ms from keypress to visual feedback
- WebSocket reconnection: <2 seconds

## DEPLOYMENT CONSIDERATIONS

### Development Setup
- Single command: `npm start` (runs both frontend and backend)
- Environment variables for ports and WebSocket URLs
- Hot reload for development

### Production Readiness
- Build scripts for frontend optimization
- Environment-specific configurations
- Basic error logging and monitoring

## SUCCESS CRITERIA

### Functional Requirements ✓
- Two players can play complete game
- Real-time synchronization works correctly
- Spectators can watch and take over
- Proper game physics and scoring
- Lobby system functions as specified

### Technical Requirements ✓
- Clean, readable code with proper structure
- Effective use of WebSockets for real-time communication
- Responsive design works on different screen sizes
- Proper error handling and edge case management
- 10-15 meaningful commits showing development progression

### Educational Objectives ✓
- Demonstrates full-stack development skills
- Shows understanding of real-time web applications
- Proper client-server architecture implementation
- State management in distributed environment
- Event-driven programming concepts

---

## QUICK START COMMANDS

```bash
# Initial setup
npm install
npm run install-all  # Install frontend and backend dependencies

# Development
npm start  # Runs both frontend (3000) and backend (3001)

# Individual services
npm run start:frontend
npm run start:backend

# Testing
npm test
npm run test:frontend
npm run test:backend
```

This specification provides complete implementation guidance for building the multiplayer Ping Pong game according to all discussed requirements and constraints.